---
openapi: 3.0.3
info:
  title: Generated API
  version: "1.0"
paths:
  /api/action:
    post:
      operationId: ActionService_add
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Action'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
  /api/action/allowedSites:
    get:
      operationId: ActionService_allowedSites
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AllowedSite'
    post:
      operationId: ActionService_addSite
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllowedSite'
  /api/action/allowedSites/{id}:
    delete:
      operationId: ActionService_deleteSite
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          description: No Content
  /api/action/list:
    get:
      operationId: ActionService_list
      parameters:
      - name: direction
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/SortDirection'
          - default: Ascending
      - name: limit
        in: query
        schema:
          format: int32
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          type: integer
      - name: sort
        in: query
        schema:
          default: id
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Action'
  /api/action/test/{id}:
    get:
      operationId: ActionService_getTestActions
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Action'
  /api/action/{id}:
    get:
      operationId: ActionService_get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
    delete:
      operationId: ActionService_delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          description: No Content
  /api/alerting/change/{id}:
    post:
      operationId: AlertingService_updateChange
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Change'
        required: true
      responses:
        "201":
          description: Created
    delete:
      operationId: AlertingService_deleteChange
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          description: No Content
  /api/alerting/changeDetection:
    post:
      operationId: AlertingService_updateChangeDetection
      parameters:
      - name: testId
        in: query
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeDetectionUpdate'
        required: true
      responses:
        "201":
          description: Created
  /api/alerting/changeDetectionModels:
    get:
      operationId: AlertingService_changeDetectionModels
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConditionConfig'
  /api/alerting/changes:
    get:
      operationId: AlertingService_changes
      parameters:
      - name: fingerprint
        in: query
        schema:
          type: string
      - name: var
        in: query
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Change'
  /api/alerting/dashboard:
    get:
      operationId: AlertingService_dashboard
      parameters:
      - name: fingerprint
        in: query
        schema:
          type: string
      - name: test
        in: query
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardInfo'
  /api/alerting/datapoint/last:
    post:
      operationId: AlertingService_findLastDatapoints
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LastDatapointsParams'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatapointLastTimestamp'
  /api/alerting/defaultChangeDetectionConfigs:
    get:
      operationId: AlertingService_defaultChangeDetectionConfigs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChangeDetection'
  /api/alerting/expectRun:
    post:
      operationId: AlertingService_expectRun
      parameters:
      - name: backlink
        in: query
        schema:
          type: string
      - name: expectedby
        in: query
        schema:
          type: string
      - name: test
        in: query
        required: true
        schema:
          type: string
      - name: timeout
        in: query
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "201":
          description: Created
  /api/alerting/expectations:
    get:
      operationId: AlertingService_expectations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RunExpectation'
  /api/alerting/grafanaStatus:
    get:
      operationId: AlertingService_grafanaStatus
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /api/alerting/missingdatarule:
    get:
      operationId: AlertingService_missingDataRules
      parameters:
      - name: testId
        in: query
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MissingDataRule'
    post:
      operationId: AlertingService_updateMissingDataRule
      parameters:
      - name: testId
        in: query
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MissingDataRule'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                format: int32
                type: integer
  /api/alerting/missingdatarule/{id}:
    delete:
      operationId: AlertingService_deleteMissingDataRule
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          description: No Content
  /api/alerting/recalculate:
    get:
      operationId: AlertingService_getRecalculationStatus
      parameters:
      - name: test
        in: query
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatapointRecalculationStatus'
    post:
      operationId: AlertingService_recalculateDatapoints
      parameters:
      - name: debug
        in: query
        schema:
          type: boolean
      - name: from
        in: query
        schema:
          format: int64
          type: integer
      - name: notify
        in: query
        schema:
          type: boolean
      - name: test
        in: query
        required: true
        schema:
          format: int32
          type: integer
      - name: to
        in: query
        schema:
          format: int64
          type: integer
      responses:
        "201":
          description: Created
  /api/alerting/variables:
    get:
      operationId: AlertingService_variables
      parameters:
      - name: test
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Variable'
    post:
      operationId: AlertingService_updateVariables
      parameters:
      - name: test
        in: query
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Variable'
        required: true
      responses:
        "201":
          description: Created
  /api/banner:
    get:
      operationId: BannerService_get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Banner'
    post:
      operationId: BannerService_set
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Banner'
        required: true
      responses:
        "201":
          description: Created
  /api/config/keycloak:
    get:
      operationId: ConfigService_keycloak
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeycloakConfig'
  /api/config/version:
    get:
      operationId: ConfigService_version
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'
  /api/dataset/bySchema:
    get:
      operationId: DatasetService_listBySchema
      parameters:
      - name: direction
        in: query
        schema:
          default: Descending
          type: string
      - name: limit
        in: query
        schema:
          format: int32
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          type: integer
      - name: sort
        in: query
        schema:
          default: start
          type: string
      - name: uri
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetList'
  /api/dataset/list/{testId}:
    get:
      operationId: DatasetService_listByTest
      parameters:
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: direction
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          format: int32
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          type: integer
      - name: sort
        in: query
        schema:
          type: string
      - name: viewId
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetList'
  /api/dataset/{datasetId}/labelValues:
    get:
      operationId: DatasetService_labelValues
      parameters:
      - name: datasetId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LabelValue'
  /api/dataset/{datasetId}/previewLabel:
    post:
      operationId: DatasetService_previewLabel
      parameters:
      - name: datasetId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelPreview'
  /api/dataset/{datasetId}/summary:
    get:
      operationId: DatasetService_getSummary
      parameters:
      - name: datasetId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: viewId
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetSummary'
  /api/dataset/{id}:
    get:
      operationId: DatasetService_getDataSet
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
  /api/dataset/{id}/query:
    get:
      operationId: DatasetService_queryData
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: array
        in: query
        schema:
          default: false
          type: boolean
      - name: query
        in: query
        required: true
        schema:
          type: string
      - name: schemaUri
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
  /api/experiment/models:
    get:
      operationId: ExperimentService_models
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConditionConfig'
  /api/experiment/run:
    get:
      operationId: ExperimentService_runExperiments
      parameters:
      - name: datasetId
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExperimentResult'
  /api/experiment/{testId}/profiles:
    get:
      operationId: ExperimentService_profiles
      parameters:
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExperimentProfile'
    post:
      operationId: ExperimentService_addOrUpdateProfile
      parameters:
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperimentProfile'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                format: int32
                type: integer
  /api/experiment/{testId}/profiles/{profileId}:
    delete:
      operationId: ExperimentService_deleteProfile
      parameters:
      - name: profileId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          description: No Content
  /api/grafana:
    get:
      operationId: GrafanaService_healthcheck
      responses:
        "200":
          description: OK
  /api/grafana/annotations:
    post:
      operationId: GrafanaService_annotations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotationsQuery'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnnotationDefinition'
  /api/grafana/query:
    post:
      operationId: GrafanaService_query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeseriesTarget'
  /api/grafana/search:
    post:
      operationId: GrafanaService_search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Target'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/log/action/{testId}:
    get:
      operationId: LogService_getActionLog
      parameters:
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: level
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: limit
        in: query
        schema:
          format: int32
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActionLog'
    delete:
      operationId: LogService_deleteActionLogs
      parameters:
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: from
        in: query
        schema:
          format: int64
          type: integer
      - name: to
        in: query
        schema:
          format: int64
          type: integer
      responses:
        "204":
          description: No Content
  /api/log/action/{testId}/count:
    get:
      operationId: LogService_getActionLogCount
      parameters:
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: level
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                format: int64
                type: integer
  /api/log/dataset/{source}/{testId}:
    get:
      operationId: LogService_getDatasetLog
      parameters:
      - name: source
        in: path
        required: true
        schema:
          type: string
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: datasetId
        in: query
        schema:
          format: int32
          type: integer
      - name: level
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: limit
        in: query
        schema:
          format: int32
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatasetLog'
    delete:
      operationId: LogService_deleteDatasetLogs
      parameters:
      - name: source
        in: path
        required: true
        schema:
          type: string
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: datasetId
        in: query
        schema:
          format: int32
          type: integer
      - name: from
        in: query
        schema:
          format: int64
          type: integer
      - name: to
        in: query
        schema:
          format: int64
          type: integer
      responses:
        "204":
          description: No Content
  /api/log/dataset/{source}/{testId}/count:
    get:
      operationId: LogService_getDatasetLogCount
      parameters:
      - name: source
        in: path
        required: true
        schema:
          type: string
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: datasetId
        in: query
        schema:
          format: int32
          type: integer
      - name: level
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                format: int64
                type: integer
  /api/log/transformation/{testId}:
    get:
      operationId: LogService_getTransformationLog
      parameters:
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: level
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: limit
        in: query
        schema:
          format: int32
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          type: integer
      - name: runId
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransformationLog'
    delete:
      operationId: LogService_deleteTransformationLogs
      parameters:
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: from
        in: query
        schema:
          format: int64
          type: integer
      - name: runId
        in: query
        schema:
          format: int32
          type: integer
      - name: to
        in: query
        schema:
          format: int64
          type: integer
      responses:
        "204":
          description: No Content
  /api/log/transformation/{testId}/count:
    get:
      operationId: LogService_getTransformationLogCount
      parameters:
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: level
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: runId
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                format: int64
                type: integer
  /api/notifications/methods:
    get:
      operationId: NotificationService_methods
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/notifications/settings:
    get:
      operationId: NotificationService_settings
      parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
      - name: team
        in: query
        required: true
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationSettings'
    post:
      operationId: NotificationService_updateSettings
      parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
      - name: team
        in: query
        required: true
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/NotificationSettings'
        required: true
      responses:
        "201":
          description: Created
  /api/notifications/test:
    post:
      operationId: NotificationService_testNotifications
      parameters:
      - name: data
        in: query
        required: true
        schema:
          type: string
      - name: method
        in: query
        schema:
          type: string
      responses:
        "201":
          description: Created
  /api/report/comment/{reportId}:
    post:
      operationId: ReportService_updateComment
      parameters:
      - name: reportId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportComment'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportComment'
  /api/report/table:
    get:
      operationId: ReportService_getTableReports
      parameters:
      - name: direction
        in: query
        schema:
          $ref: '#/components/schemas/SortDirection'
      - name: folder
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          format: int32
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          type: integer
      - name: roles
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      - name: test
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllTableReports'
  /api/report/table/config:
    post:
      operationId: ReportService_updateTableReportConfig
      parameters:
      - name: edit
        in: query
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableReportConfig'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableReport'
  /api/report/table/config/{id}:
    get:
      operationId: ReportService_getTableReportConfig
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableReportConfig'
  /api/report/table/preview:
    post:
      operationId: ReportService_previewTableReport
      parameters:
      - name: edit
        in: query
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableReportConfig'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableReport'
  /api/report/table/{id}:
    get:
      operationId: ReportService_getTableReport
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableReport'
    delete:
      operationId: ReportService_deleteTableReport
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          description: No Content
  /api/run/autocomplete:
    get:
      operationId: RunService_autocomplete
      parameters:
      - name: query
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/run/bySchema:
    get:
      operationId: RunService_listBySchema
      parameters:
      - name: direction
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          format: int32
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          type: integer
      - name: sort
        in: query
        schema:
          type: string
      - name: uri
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunsSummary'
  /api/run/count:
    get:
      operationId: RunService_runCount
      parameters:
      - name: testId
        in: query
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunCount'
  /api/run/data:
    post:
      operationId: RunService_addRunFromData
      parameters:
      - name: access
        in: query
        schema:
          $ref: '#/components/schemas/Access'
      - name: description
        in: query
        schema:
          type: string
      - name: owner
        in: query
        schema:
          type: string
      - name: schema
        in: query
        schema:
          type: string
      - name: start
        in: query
        required: true
        schema:
          type: string
      - name: stop
        in: query
        required: true
        schema:
          type: string
      - name: test
        in: query
        required: true
        schema:
          type: string
      - name: token
        in: query
        description: Horreum internal token. Incompatible with Keycloak
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
        required: true
      responses:
        "200":
          description: OK
  /api/run/list:
    get:
      operationId: RunService_listAllRuns
      parameters:
      - name: direction
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          format: int32
          type: integer
      - name: matchAll
        in: query
        schema:
          type: boolean
      - name: page
        in: query
        schema:
          format: int32
          type: integer
      - name: query
        in: query
        schema:
          type: string
      - name: roles
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      - name: trashed
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunsSummary'
  /api/run/list/{testId}:
    get:
      operationId: RunService_listTestRuns
      parameters:
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: direction
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          format: int32
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          type: integer
      - name: sort
        in: query
        schema:
          type: string
      - name: trashed
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunsSummary'
  /api/run/recalculateAll:
    post:
      operationId: RunService_recalculateAll
      parameters:
      - name: from
        in: query
        schema:
          type: string
      - name: to
        in: query
        schema:
          type: string
      responses:
        "201":
          description: Created
  /api/run/test/{test}:
    post:
      operationId: RunService_add
      parameters:
      - name: test
        in: path
        required: true
        schema:
          type: string
      - name: access
        in: query
        schema:
          $ref: '#/components/schemas/Access'
      - name: owner
        in: query
        schema:
          type: string
      - name: token
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Run'
        required: true
      responses:
        "200":
          description: OK
  /api/run/{id}:
    get:
      operationId: RunService_getRun
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: token
        in: query
        schema:
          type: string
      responses:
        default:
          description: Returns an instance of RunExtended
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunExtended'
  /api/run/{id}/data:
    get:
      operationId: RunService_getData
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: schemaUri
        in: query
        schema:
          type: string
      - name: token
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
  /api/run/{id}/description:
    post:
      operationId: RunService_updateDescription
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "201":
          description: Created
  /api/run/{id}/dropToken:
    post:
      operationId: RunService_dropToken
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /api/run/{id}/query:
    get:
      operationId: RunService_queryData
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: array
        in: query
        schema:
          default: false
          type: boolean
      - name: query
        in: query
        required: true
        schema:
          type: string
      - name: uri
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
  /api/run/{id}/recalculate:
    post:
      operationId: RunService_recalculateDatasets
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  format: int32
                  type: integer
  /api/run/{id}/resetToken:
    post:
      operationId: RunService_resetToken
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /api/run/{id}/schema:
    post:
      operationId: RunService_updateSchema
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: path
        in: query
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /api/run/{id}/summary:
    get:
      operationId: RunService_getRunSummary
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: token
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunSummary'
  /api/run/{id}/trash:
    post:
      operationId: RunService_trash
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: isTrashed
        in: query
        schema:
          type: boolean
      responses:
        "201":
          description: Created
  /api/run/{id}/updateAccess:
    post:
      operationId: RunService_updateAccess
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: access
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Access'
      - name: owner
        in: query
        required: true
        schema:
          type: string
      responses:
        "201":
          description: Created
  /api/schema:
    get:
      operationId: SchemaService_list
      parameters:
      - name: direction
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/SortDirection'
          - default: Ascending
      - name: limit
        in: query
        schema:
          format: int32
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          type: integer
      - name: sort
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
    post:
      operationId: SchemaService_add
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                format: int32
                type: integer
  /api/schema/allLabels:
    get:
      operationId: SchemaService_allLabels
      parameters:
      - name: name
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LabelInfo'
  /api/schema/allTransformers:
    get:
      operationId: SchemaService_allTransformers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransformerInfo'
  /api/schema/descriptors:
    get:
      operationId: SchemaService_descriptors
      parameters:
      - name: id
        in: query
        schema:
          type: array
          items:
            format: int32
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaDescriptor'
  /api/schema/findUsages:
    get:
      operationId: SchemaService_findUsages
      parameters:
      - name: label
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LabelLocation'
  /api/schema/idByUri/{uri}:
    get:
      operationId: SchemaService_idByUri
      parameters:
      - name: uri
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                format: int32
                type: integer
  /api/schema/{id}:
    get:
      operationId: SchemaService_getSchema
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: token
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
    delete:
      operationId: SchemaService_delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          description: No Content
  /api/schema/{id}/dropToken:
    post:
      operationId: SchemaService_dropToken
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/schema/{id}/resetToken:
    post:
      operationId: SchemaService_resetToken
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/schema/{id}/updateAccess:
    post:
      operationId: SchemaService_updateAccess
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: access
        in: query
        required: true
        schema:
          format: int32
          type: integer
      - name: owner
        in: query
        required: true
        schema:
          type: string
      responses:
        "201":
          description: Created
  /api/schema/{schemaId}/labels:
    get:
      operationId: SchemaService_labels
      parameters:
      - name: schemaId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
    post:
      operationId: SchemaService_addOrUpdateLabel
      parameters:
      - name: schemaId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                format: int32
                type: integer
  /api/schema/{schemaId}/labels/{labelId}:
    delete:
      operationId: SchemaService_deleteLabel
      parameters:
      - name: labelId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: schemaId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          description: No Content
  /api/schema/{schemaId}/transformers:
    get:
      operationId: SchemaService_listTransformers
      parameters:
      - name: schemaId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transformer'
    post:
      operationId: SchemaService_addOrUpdateTransformer
      parameters:
      - name: schemaId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transformer'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                format: int32
                type: integer
  /api/schema/{schemaId}/transformers/{transformerId}:
    delete:
      operationId: SchemaService_deleteTransformer
      parameters:
      - name: schemaId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: transformerId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          description: No Content
  /api/sql/roles:
    get:
      operationId: SqlService_roles
      parameters:
      - name: system
        in: query
        schema:
          default: false
          type: boolean
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/sql/testjsonpath:
    get:
      operationId: SqlService_testJsonPath
      parameters:
      - name: query
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonpathValidation'
  /api/subscriptions:
    get:
      operationId: SubscriptionService_all
      parameters:
      - name: folder
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  uniqueItems: true
                  type: array
                  items:
                    type: string
  /api/subscriptions/{testId}:
    get:
      operationId: SubscriptionService_get
      parameters:
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Watch'
  /api/subscriptions/{testid}:
    post:
      operationId: SubscriptionService_update
      parameters:
      - name: testid
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Watch'
        required: true
      responses:
        "201":
          description: Created
  /api/subscriptions/{testid}/add:
    post:
      operationId: SubscriptionService_addUserOrTeam
      parameters:
      - name: testid
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/subscriptions/{testid}/remove:
    post:
      operationId: SubscriptionService_removeUserOrTeam
      parameters:
      - name: testid
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/test:
    get:
      operationId: TestService_list
      parameters:
      - name: direction
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/SortDirection'
          - default: Ascending
      - name: limit
        in: query
        schema:
          format: int32
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          type: integer
      - name: roles
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          default: name
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Test'
    post:
      operationId: TestService_add
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Test'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
  /api/test/byName/{name}:
    get:
      operationId: TestService_getByNameOrId
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
  /api/test/folders:
    get:
      operationId: TestService_folders
      parameters:
      - name: roles
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/test/summary:
    get:
      operationId: TestService_summary
      parameters:
      - name: folder
        in: query
        schema:
          type: string
      - name: roles
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestListing'
  /api/test/{id}:
    get:
      operationId: TestService_get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: token
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
    delete:
      operationId: TestService_delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          description: No Content
  /api/test/{id}/addToken:
    post:
      operationId: TestService_addToken
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestToken'
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                format: int32
                type: integer
  /api/test/{id}/fingerprint:
    get:
      operationId: TestService_listFingerprints
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {}
  /api/test/{id}/labelValues:
    get:
      operationId: TestService_listLabelValues
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: filtering
        in: query
        schema:
          default: true
          type: boolean
      - name: metrics
        in: query
        schema:
          default: true
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {}
  /api/test/{id}/move:
    post:
      operationId: TestService_updateFolder
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: folder
        in: query
        schema:
          type: string
      responses:
        "201":
          description: Created
  /api/test/{id}/notifications:
    post:
      operationId: TestService_updateNotifications
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: enabled
        in: query
        required: true
        schema:
          type: boolean
      responses:
        "201":
          description: Created
  /api/test/{id}/recalculate:
    get:
      operationId: TestService_getRecalculationStatus
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecalculationStatus'
    post:
      operationId: TestService_recalculateDatasets
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "201":
          description: Created
  /api/test/{id}/revokeToken/{tokenId}:
    post:
      operationId: TestService_dropToken
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: tokenId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "201":
          description: Created
  /api/test/{id}/tokens:
    get:
      operationId: TestService_tokens
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestToken'
  /api/test/{id}/transformers:
    post:
      operationId: TestService_updateTransformers
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                format: int32
                type: integer
        required: true
      responses:
        "201":
          description: Created
  /api/test/{id}/updateAccess:
    post:
      operationId: TestService_updateAccess
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: access
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Access'
      - name: owner
        in: query
        required: true
        schema:
          type: string
      responses:
        "201":
          description: Created
  /api/test/{testId}/action:
    post:
      operationId: TestService_updateAction
      parameters:
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Action'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
  /api/test/{testId}/view:
    post:
      operationId: TestService_updateView
      parameters:
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/View'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                format: int32
                type: integer
  /api/test/{testId}/view/{viewId}:
    delete:
      operationId: TestService_deleteView
      parameters:
      - name: testId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: viewId
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          description: No Content
  /api/user/administrators:
    get:
      operationId: UserService_administrators
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserData'
    post:
      operationId: UserService_updateAdministrators
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
  /api/user/allTeams:
    get:
      operationId: UserService_getAllTeams
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/user/createUser:
    post:
      operationId: UserService_createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        "201":
          description: Created
  /api/user/defaultTeam:
    get:
      operationId: UserService_defaultTeam
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
    post:
      operationId: UserService_setDefaultTeam
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "201":
          description: Created
  /api/user/info:
    post:
      operationId: UserService_info
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserData'
  /api/user/search:
    get:
      operationId: UserService_searchUsers
      parameters:
      - name: query
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserData'
  /api/user/team/{team}:
    post:
      operationId: UserService_addTeam
      parameters:
      - name: team
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
    delete:
      operationId: UserService_deleteTeam
      parameters:
      - name: team
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
  /api/user/team/{team}/members:
    get:
      operationId: UserService_teamMembers
      parameters:
      - name: team
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
    post:
      operationId: UserService_updateTeamMembers
      parameters:
      - name: team
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
  /api/user/teams:
    get:
      operationId: UserService_getTeams
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
components:
  schemas:
    Access:
      enum:
      - 0
      - 1
      - 2
      type: integer
    Action:
      required:
      - id
      - event
      - type
      - config
      - testId
      - active
      - runAlways
      type: object
      properties:
        id:
          format: int32
          type: integer
        event:
          type: string
          nullable: false
        type:
          type: string
          nullable: false
        config:
          type: array
          nullable: false
        testId:
          format: int32
          type: integer
          nullable: false
        active:
          type: boolean
          nullable: false
        runAlways:
          type: boolean
          nullable: false
        secrets:
          type: array
    ActionLog:
      required:
      - id
      - level
      - timestamp
      - message
      - testId
      - event
      type: object
      properties:
        id:
          format: int64
          type: integer
        level:
          format: int32
          type: integer
          nullable: false
        timestamp:
          type: number
          nullable: false
        message:
          type: string
          nullable: false
        testId:
          format: int32
          type: integer
          nullable: false
        event:
          type: string
          nullable: false
        type:
          type: string
    AllTableReports:
      required:
      - reports
      - count
      type: object
      properties:
        reports:
          type: array
          items:
            $ref: '#/components/schemas/TableReportSummary'
          nullable: false
        count:
          format: int64
          type: integer
    AllowedSite:
      required:
      - prefix
      type: object
      properties:
        id:
          format: int64
          type: integer
        prefix:
          type: string
          nullable: false
    AnnotationDefinition:
      type: object
      properties:
        title:
          type: string
        text:
          type: string
        isRegion:
          type: boolean
        time:
          format: int64
          type: integer
        timeEnd:
          format: int64
          type: integer
        tags:
          type: array
          items:
            type: string
        changeId:
          format: int32
          type: integer
        variableId:
          format: int32
          type: integer
        runId:
          format: int32
          type: integer
        datasetOrdinal:
          format: int32
          type: integer
    AnnotationQuery:
      type: object
      properties:
        name:
          type: string
        datasource:
          type: string
        iconColor:
          type: string
        enable:
          type: boolean
        query:
          type: string
    AnnotationsQuery:
      type: object
      properties:
        range:
          $ref: '#/components/schemas/Range'
        annotation:
          $ref: '#/components/schemas/AnnotationQuery'
    Banner:
      required:
      - created
      - active
      - severity
      - title
      type: object
      properties:
        id:
          format: int32
          type: integer
        created:
          type: number
          nullable: false
        active:
          type: boolean
          nullable: false
        severity:
          type: string
          nullable: false
        title:
          type: string
          nullable: false
        message:
          type: string
    BetterOrWorse:
      enum:
      - BETTER
      - SAME
      - WORSE
      type: string
    Change:
      required:
      - id
      - variable
      - timestamp
      - confirmed
      type: object
      properties:
        id:
          format: int32
          type: integer
        variable:
          allOf:
          - $ref: '#/components/schemas/Variable'
          - nullable: false
        timestamp:
          format: date-time
          type: string
          nullable: false
        confirmed:
          type: boolean
          nullable: false
        description:
          type: string
        dataset:
          $ref: '#/components/schemas/DatasetInfo'
    ChangeDetection:
      required:
      - id
      - model
      - config
      type: object
      properties:
        id:
          format: int32
          type: integer
        model:
          type: string
          nullable: false
        config:
          type: array
          nullable: false
    ChangeDetectionUpdate:
      type: object
      properties:
        timelineLabels:
          type: array
          items:
            type: string
        timelineFunction:
          type: string
        fingerprintLabels:
          type: array
          items:
            type: string
        fingerprintFilter:
          type: string
    ComparisonResult:
      type: object
      properties:
        overall:
          $ref: '#/components/schemas/BetterOrWorse'
        experimentValue:
          format: double
          type: number
        baselineValue:
          format: double
          type: number
        result:
          type: string
    ComponentType:
      enum:
      - LOG_SLIDER
      - ENUM
      - NUMBER_BOUND
      - SWITCH
      type: string
    ConditionComponent:
      required:
      - name
      - title
      - description
      - type
      - properties
      type: object
      properties:
        name:
          type: string
          nullable: false
        title:
          type: string
          nullable: false
        description:
          type: string
          nullable: false
        type:
          allOf:
          - $ref: '#/components/schemas/ComponentType'
          - nullable: false
        properties:
          type: object
          additionalProperties:
            type: object
          nullable: false
    ConditionConfig:
      required:
      - name
      - title
      - description
      - ui
      type: object
      properties:
        name:
          type: string
          nullable: false
        title:
          type: string
          nullable: false
        description:
          type: string
          nullable: false
        ui:
          type: array
          items:
            $ref: '#/components/schemas/ConditionComponent'
          nullable: false
        defaults:
          type: object
          additionalProperties: {}
    DashboardInfo:
      required:
      - testId
      - uid
      - url
      - panels
      type: object
      properties:
        testId:
          format: int32
          type: integer
        uid:
          type: string
          nullable: false
        url:
          type: string
          nullable: false
        panels:
          type: array
          items:
            $ref: '#/components/schemas/PanelInfo'
          nullable: false
    DatapointLastTimestamp:
      required:
      - variable
      - timestamp
      type: object
      properties:
        variable:
          format: int32
          type: integer
        timestamp:
          type: number
          nullable: false
    DatapointRecalculationStatus:
      required:
      - percentage
      - done
      - datasetsWithoutValue
      type: object
      properties:
        percentage:
          format: int32
          type: integer
        done:
          type: boolean
        totalDatasets:
          format: int32
          type: integer
        errors:
          format: int32
          type: integer
        datasetsWithoutValue:
          type: array
          items:
            $ref: '#/components/schemas/DatasetInfo'
          nullable: false
    Dataset:
      required:
      - owner
      - access
      type: object
      properties:
        owner:
          type: string
          nullable: false
        access:
          allOf:
          - $ref: '#/components/schemas/Access'
          - nullable: false
        id:
          format: int32
          type: integer
        start:
          format: date-time
          type: string
        stop:
          format: date-time
          type: string
        description:
          type: string
        testid:
          format: int32
          type: integer
        data:
          type: array
        ordinal:
          format: int32
          type: integer
        validationErrors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        runId:
          format: int32
          type: integer
    DatasetInfo:
      required:
      - id
      - runId
      - ordinal
      - testId
      type: object
      properties:
        id:
          format: int32
          type: integer
        runId:
          format: int32
          type: integer
        ordinal:
          format: int32
          type: integer
        testId:
          format: int32
          type: integer
    DatasetList:
      required:
      - total
      - datasets
      type: object
      properties:
        total:
          format: int64
          type: integer
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/DatasetSummary'
          nullable: false
    DatasetLog:
      required:
      - id
      - level
      - timestamp
      - message
      - source
      - testId
      - runId
      - datasetId
      - datasetOrdinal
      type: object
      properties:
        id:
          format: int64
          type: integer
        level:
          format: int32
          type: integer
          nullable: false
        timestamp:
          type: number
          nullable: false
        message:
          type: string
          nullable: false
        source:
          type: string
          nullable: false
        testId:
          format: int32
          type: integer
        runId:
          format: int32
          type: integer
        datasetId:
          format: int32
          type: integer
        datasetOrdinal:
          format: int32
          type: integer
    DatasetSummary:
      required:
      - id
      - runId
      - ordinal
      - testId
      - testname
      - start
      - stop
      - owner
      - access
      - schemas
      type: object
      properties:
        id:
          format: int32
          type: integer
        runId:
          format: int32
          type: integer
        ordinal:
          format: int32
          type: integer
        testId:
          format: int32
          type: integer
        testname:
          type: string
          nullable: false
        description:
          type: string
        start:
          format: int64
          type: integer
        stop:
          format: int64
          type: integer
        owner:
          type: string
          nullable: false
        access:
          $ref: '#/components/schemas/Access'
        view:
          type: array
        schemas:
          type: array
        validationErrors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    ExperimentComparison:
      required:
      - model
      - config
      - variableId
      type: object
      properties:
        model:
          type: string
          nullable: false
        config:
          type: array
          nullable: false
        variableId:
          format: int32
          type: integer
    ExperimentProfile:
      required:
      - id
      - name
      - selectorLabels
      - baselineLabels
      - comparisons
      type: object
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
          nullable: false
        selectorLabels:
          type: array
          items:
            type: string
        selectorFilter:
          type: string
        baselineLabels:
          type: array
          items:
            type: string
        baselineFilter:
          type: string
        comparisons:
          type: array
          items:
            $ref: '#/components/schemas/ExperimentComparison'
        extraLabels:
          type: array
          items:
            type: string
    ExperimentResult:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/ExperimentProfile'
        logs:
          type: array
          items:
            $ref: '#/components/schemas/DatasetLog'
        datasetInfo:
          $ref: '#/components/schemas/DatasetInfo'
        baseline:
          type: array
          items:
            $ref: '#/components/schemas/DatasetInfo'
        results:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ComparisonResult'
        extraLabels:
          type: array
        notify:
          type: boolean
    Extractor:
      required:
      - name
      - jsonpath
      - array
      type: object
      properties:
        name:
          type: string
          nullable: false
        jsonpath:
          type: string
          nullable: false
        array:
          type: boolean
          nullable: false
    JsonpathValidation:
      required:
      - valid
      type: object
      properties:
        valid:
          type: boolean
        jsonpath:
          type: string
        errorCode:
          format: int32
          type: integer
        sqlState:
          type: string
        reason:
          type: string
        sql:
          type: string
    KeycloakConfig:
      type: object
      properties:
        realm:
          type: string
        url:
          type: string
        clientId:
          type: string
    Label:
      required:
      - owner
      - access
      - id
      - name
      - extractors
      - filtering
      - metrics
      - schemaId
      type: object
      properties:
        owner:
          type: string
          nullable: false
        access:
          allOf:
          - $ref: '#/components/schemas/Access'
          - nullable: false
        id:
          format: int32
          type: integer
        name:
          type: string
          nullable: false
        extractors:
          type: array
          items:
            $ref: '#/components/schemas/Extractor'
          nullable: false
        function:
          type: string
        filtering:
          type: boolean
          nullable: false
        metrics:
          type: boolean
          nullable: false
        schemaId:
          format: int32
          type: integer
    LabelInFingerprint:
      type: object
      properties:
        type:
          type: string
        testId:
          format: int32
          type: integer
        testName:
          type: string
    LabelInReport:
      type: object
      properties:
        type:
          type: string
        testId:
          format: int32
          type: integer
        testName:
          type: string
        configId:
          format: int32
          type: integer
        title:
          type: string
        where:
          type: string
        name:
          type: string
    LabelInRule:
      type: object
      properties:
        type:
          type: string
        testId:
          format: int32
          type: integer
        testName:
          type: string
        ruleId:
          format: int32
          type: integer
        ruleName:
          type: string
    LabelInVariable:
      type: object
      properties:
        type:
          type: string
        testId:
          format: int32
          type: integer
        testName:
          type: string
        variableId:
          format: int32
          type: integer
        variableName:
          type: string
    LabelInView:
      type: object
      properties:
        type:
          type: string
        testId:
          format: int32
          type: integer
        testName:
          type: string
        viewId:
          format: int32
          type: integer
        viewName:
          type: string
        componentId:
          format: int32
          type: integer
        header:
          type: string
    LabelInfo:
      required:
      - name
      - metrics
      - filtering
      - schemas
      type: object
      properties:
        name:
          type: string
          nullable: false
        metrics:
          type: boolean
        filtering:
          type: boolean
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/SchemaDescriptor'
          nullable: false
    LabelLocation:
      type: object
      properties:
        type:
          type: string
        testId:
          format: int32
          type: integer
        testName:
          type: string
      anyOf:
      - $ref: '#/components/schemas/LabelInFingerprint'
      - $ref: '#/components/schemas/LabelInRule'
      - $ref: '#/components/schemas/LabelInReport'
      - $ref: '#/components/schemas/LabelInVariable'
      - $ref: '#/components/schemas/LabelInView'
    LabelPreview:
      type: object
      properties:
        value:
          type: array
        output:
          type: string
    LabelValue:
      required:
      - id
      - name
      - schema
      type: object
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
          nullable: false
        schema:
          allOf:
          - $ref: '#/components/schemas/SchemaDescriptor'
          - nullable: false
        value:
          type: array
    LastDatapointsParams:
      required:
      - variables
      - fingerprint
      type: object
      properties:
        variables:
          type: array
          items:
            format: int32
            type: integer
          nullable: false
        fingerprint:
          type: string
          nullable: false
    MissingDataRule:
      required:
      - id
      - maxStaleness
      - testId
      type: object
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
        labels:
          type: array
        condition:
          type: string
        maxStaleness:
          format: int64
          type: integer
          nullable: false
        lastNotification:
          format: date-time
          type: string
        testId:
          format: int32
          type: integer
    NewUser:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserData'
        password:
          type: string
        team:
          type: string
        roles:
          type: array
          items:
            type: string
    NotificationSettings:
      required:
      - name
      - isTeam
      - method
      - disabled
      type: object
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
          nullable: false
        isTeam:
          type: boolean
          nullable: false
        method:
          type: string
          nullable: false
        data:
          type: string
        disabled:
          type: boolean
          nullable: false
    PanelInfo:
      required:
      - name
      - variables
      type: object
      properties:
        name:
          type: string
          nullable: false
        variables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
          nullable: false
    Query:
      required:
      - range
      - targets
      type: object
      properties:
        range:
          allOf:
          - $ref: '#/components/schemas/Range'
          - nullable: false
        targets:
          type: array
          items:
            $ref: '#/components/schemas/Target'
          nullable: false
    QueryResult:
      required:
      - valid
      type: object
      properties:
        valid:
          type: boolean
        jsonpath:
          type: string
        errorCode:
          format: int32
          type: integer
        sqlState:
          type: string
        reason:
          type: string
        sql:
          type: string
        value:
          type: string
    Range:
      required:
      - from
      - to
      type: object
      properties:
        from:
          format: date-time
          type: string
          nullable: false
        to:
          format: date-time
          type: string
          nullable: false
    RecalculationStatus:
      required:
      - timestamp
      - totalRuns
      - finished
      - datasets
      type: object
      properties:
        timestamp:
          format: int64
          type: integer
        totalRuns:
          format: int64
          type: integer
        finished:
          format: int64
          type: integer
        datasets:
          format: int64
          type: integer
    ReportComment:
      required:
      - level
      - comment
      type: object
      properties:
        id:
          format: int32
          type: integer
        level:
          format: int32
          type: integer
          nullable: false
        category:
          type: string
        componentId:
          format: int32
          type: integer
        comment:
          type: string
          nullable: false
    ReportComponent:
      required:
      - name
      - order
      - labels
      type: object
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
          nullable: false
        order:
          format: int32
          type: integer
          nullable: false
        labels:
          type: array
          nullable: false
        function:
          type: string
        unit:
          type: string
    ReportLog:
      required:
      - id
      - level
      - timestamp
      - message
      - reportId
      type: object
      properties:
        id:
          format: int64
          type: integer
        level:
          format: int32
          type: integer
          nullable: false
        timestamp:
          type: number
          nullable: false
        message:
          type: string
          nullable: false
        reportId:
          format: int32
          type: integer
    Run:
      required:
      - owner
      - access
      - id
      - start
      - stop
      - testid
      - data
      - trashed
      type: object
      properties:
        owner:
          type: string
          nullable: false
        access:
          allOf:
          - $ref: '#/components/schemas/Access'
          - nullable: false
        token:
          type: string
        id:
          format: int32
          type: integer
        start:
          type: number
          nullable: false
        stop:
          type: number
          nullable: false
        description:
          type: string
        testid:
          format: int32
          type: integer
          nullable: false
        data:
          type: array
          nullable: false
        trashed:
          type: boolean
          nullable: false
        validationErrors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    RunCount:
      required:
      - total
      - active
      - trashed
      type: object
      properties:
        total:
          format: int64
          type: integer
        active:
          format: int64
          type: integer
        trashed:
          format: int64
          type: integer
    RunExpectation:
      required:
      - testId
      - expectedBefore
      type: object
      properties:
        id:
          format: int64
          type: integer
        testId:
          format: int32
          type: integer
          nullable: false
        expectedBefore:
          format: date-time
          type: string
          nullable: false
        expectedBy:
          type: string
        backlink:
          type: string
    RunExtended:
      required:
      - owner
      - access
      - id
      - start
      - stop
      - testid
      - data
      - trashed
      - schema
      - testname
      - datasets
      type: object
      properties:
        owner:
          type: string
          nullable: false
        access:
          allOf:
          - $ref: '#/components/schemas/Access'
          - nullable: false
        token:
          type: string
        id:
          format: int32
          type: integer
        start:
          type: number
          nullable: false
        stop:
          type: number
          nullable: false
        description:
          type: string
        testid:
          format: int32
          type: integer
          nullable: false
        data:
          type: array
          nullable: false
        trashed:
          type: boolean
          nullable: false
        validationErrors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        schema:
          type: array
          nullable: false
        testname:
          type: string
          nullable: false
        datasets:
          type: array
          items:
            format: int32
            type: integer
    RunSummary:
      required:
      - id
      - start
      - stop
      - testid
      - owner
      - access
      - testname
      - trashed
      - datasets
      type: object
      properties:
        id:
          format: int32
          type: integer
        start:
          format: int64
          type: integer
        stop:
          format: int64
          type: integer
        testid:
          format: int32
          type: integer
        owner:
          type: string
          nullable: false
        access:
          $ref: '#/components/schemas/Access'
        token:
          type: string
        testname:
          type: string
          nullable: false
        trashed:
          type: boolean
        description:
          type: string
        schema:
          type: array
        datasets:
          type: array
          items:
            format: int32
            type: integer
        validationErrors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    RunsSummary:
      required:
      - total
      - runs
      type: object
      properties:
        total:
          format: int64
          type: integer
        runs:
          type: array
          items:
            $ref: '#/components/schemas/RunSummary'
          nullable: false
    Schema:
      required:
      - owner
      - access
      - id
      - uri
      - name
      type: object
      properties:
        owner:
          type: string
          nullable: false
        access:
          allOf:
          - $ref: '#/components/schemas/Access'
          - nullable: false
        token:
          type: string
        id:
          format: int32
          type: integer
        uri:
          type: string
          nullable: false
        name:
          type: string
          nullable: false
        description:
          type: string
        schema:
          type: array
    SchemaDescriptor:
      required:
      - id
      - name
      - uri
      type: object
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
          nullable: false
        uri:
          type: string
          nullable: false
    SortDirection:
      enum:
      - Ascending
      - Descending
      type: string
    TableReport:
      required:
      - id
      - config
      - created
      - comments
      - data
      - logs
      type: object
      properties:
        id:
          format: int32
          type: integer
        config:
          $ref: '#/components/schemas/TableReportConfig'
        created:
          type: number
          nullable: false
        comments:
          type: array
          items:
            $ref: '#/components/schemas/ReportComment'
          nullable: false
        data:
          type: array
          items:
            $ref: '#/components/schemas/TableReportData'
          nullable: false
        logs:
          type: array
          items:
            $ref: '#/components/schemas/ReportLog'
          nullable: false
    TableReportConfig:
      required:
      - id
      - title
      - seriesLabels
      - components
      type: object
      properties:
        id:
          format: int32
          type: integer
        title:
          type: string
          nullable: false
        test:
          $ref: '#/components/schemas/Test'
        filterLabels:
          type: array
        filterFunction:
          type: string
        categoryLabels:
          type: array
        categoryFunction:
          type: string
        categoryFormatter:
          type: string
        seriesLabels:
          type: array
          nullable: false
        seriesFunction:
          type: string
        seriesFormatter:
          type: string
        scaleLabels:
          type: array
        scaleFunction:
          type: string
        scaleFormatter:
          type: string
        scaleDescription:
          type: string
        components:
          type: array
          items:
            $ref: '#/components/schemas/ReportComponent'
          nullable: false
    TableReportData:
      required:
      - datasetId
      - runId
      - ordinal
      - category
      - series
      - scale
      - values
      type: object
      properties:
        datasetId:
          format: int32
          type: integer
          nullable: false
        runId:
          format: int32
          type: integer
          nullable: false
        ordinal:
          format: int32
          type: integer
          nullable: false
        category:
          type: string
          nullable: false
        series:
          type: string
          nullable: false
        scale:
          type: string
          nullable: false
        values:
          type: array
          nullable: false
    TableReportSummary:
      required:
      - testId
      - testName
      - title
      - reports
      type: object
      properties:
        testId:
          format: int32
          type: integer
        testName:
          type: string
          nullable: false
        title:
          type: string
          nullable: false
        reports:
          type: array
          items:
            $ref: '#/components/schemas/TableReportSummaryItem'
          nullable: false
    TableReportSummaryItem:
      required:
      - id
      - configId
      - created
      type: object
      properties:
        id:
          format: int32
          type: integer
        configId:
          format: int32
          type: integer
        created:
          type: number
    Target:
      type: object
      properties:
        target:
          type: string
        type:
          type: string
        refId:
          type: string
        data:
          type: string
        payload:
          type: string
    Test:
      required:
      - id
      - name
      - owner
      - access
      - defaultView
      - views
      - notificationsEnabled
      type: object
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
          nullable: false
        folder:
          type: string
        description:
          type: string
        owner:
          type: string
          nullable: false
        access:
          allOf:
          - $ref: '#/components/schemas/Access'
          - nullable: false
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/TestToken'
        timelineLabels:
          type: array
          items:
            type: string
        timelineFunction:
          type: string
        fingerprintLabels:
          type: array
          items:
            type: string
        fingerprintFilter:
          type: string
        defaultView:
          allOf:
          - $ref: '#/components/schemas/View'
          - nullable: false
        views:
          type: array
          items:
            $ref: '#/components/schemas/View'
          nullable: false
        compareUrl:
          type: string
        transformers:
          type: array
          items:
            $ref: '#/components/schemas/Transformer'
        notificationsEnabled:
          type: boolean
          nullable: false
    TestListing:
      type: object
      properties:
        tests:
          type: array
          items:
            $ref: '#/components/schemas/TestSummary'
    TestSummary:
      required:
      - id
      - name
      - owner
      - access
      type: object
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
          nullable: false
        folder:
          type: string
        description:
          type: string
        datasets:
          type: number
        runs:
          type: number
        owner:
          type: string
          nullable: false
        access:
          $ref: '#/components/schemas/Access'
    TestToken:
      required:
      - id
      - value
      - permissions
      - description
      type: object
      properties:
        id:
          format: int32
          type: integer
          nullable: false
        value:
          type: string
          nullable: false
        permissions:
          format: int32
          type: integer
          nullable: false
        description:
          type: string
          nullable: false
    TimeseriesTarget:
      required:
      - target
      - datapoints
      - variableId
      type: object
      properties:
        target:
          type: string
          nullable: false
        datapoints:
          type: array
          items: {}
          nullable: false
        variableId:
          format: int32
          type: integer
    TransformationLog:
      required:
      - id
      - level
      - timestamp
      - message
      type: object
      properties:
        id:
          format: int64
          type: integer
        level:
          format: int32
          type: integer
          nullable: false
        timestamp:
          type: number
          nullable: false
        message:
          type: string
          nullable: false
        testId:
          format: int32
          type: integer
        runId:
          format: int32
          type: integer
    Transformer:
      required:
      - owner
      - access
      - id
      - name
      - extractors
      - schemaId
      - schemaUri
      - schemaName
      type: object
      properties:
        owner:
          type: string
          nullable: false
        access:
          allOf:
          - $ref: '#/components/schemas/Access'
          - nullable: false
        id:
          format: int32
          type: integer
        name:
          type: string
          nullable: false
        description:
          type: string
        targetSchemaUri:
          type: string
        extractors:
          type: array
          items:
            $ref: '#/components/schemas/Extractor'
          nullable: false
        function:
          type: string
        schemaId:
          format: int32
          type: integer
        schemaUri:
          type: string
        schemaName:
          type: string
    TransformerInfo:
      required:
      - schemaId
      - schemaUri
      - schemaName
      - transformerId
      - transformerName
      type: object
      properties:
        schemaId:
          format: int32
          type: integer
        schemaUri:
          type: string
          nullable: false
        schemaName:
          type: string
          nullable: false
        transformerId:
          format: int32
          type: integer
        transformerName:
          type: string
          nullable: false
    UserData:
      required:
      - id
      - username
      type: object
      properties:
        id:
          type: string
          nullable: false
        username:
          type: string
          nullable: false
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    ValidationError:
      required:
      - error
      - schemaId
      type: object
      properties:
        error:
          type: array
          nullable: false
        schemaId:
          format: int32
          type: integer
    Variable:
      required:
      - id
      - testId
      - name
      - order
      - labels
      - changeDetection
      type: object
      properties:
        id:
          format: int32
          type: integer
        testId:
          format: int32
          type: integer
          nullable: false
        name:
          type: string
          nullable: false
        group:
          type: string
        order:
          format: int32
          type: integer
          nullable: false
        labels:
          type: array
          nullable: false
        calculation:
          type: string
        changeDetection:
          type: array
          items:
            $ref: '#/components/schemas/ChangeDetection'
    VersionInfo:
      required:
      - version
      - commit
      - buildTimestamp
      - startTimestamp
      type: object
      properties:
        version:
          type: string
          nullable: false
        commit:
          type: string
          nullable: false
        buildTimestamp:
          format: int64
          type: integer
        startTimestamp:
          format: int64
          type: integer
    View:
      required:
      - id
      - name
      - components
      type: object
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
          nullable: false
        components:
          type: array
          items:
            $ref: '#/components/schemas/ViewComponent'
          nullable: false
    ViewComponent:
      required:
      - id
      - headerOrder
      - headerName
      - labels
      type: object
      properties:
        id:
          format: int32
          type: integer
        headerOrder:
          format: int32
          type: integer
          nullable: false
        headerName:
          type: string
          nullable: false
        labels:
          type: array
          nullable: false
        render:
          type: string
    Watch:
      required:
      - users
      - optout
      - teams
      - testId
      type: object
      properties:
        id:
          format: int32
          type: integer
        users:
          type: array
          items:
            type: string
          nullable: false
        optout:
          type: array
          items:
            type: string
          nullable: false
        teams:
          type: array
          items:
            type: string
          nullable: false
        testId:
          format: int32
          type: integer
